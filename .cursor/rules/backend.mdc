---
description: 
globs: *.ts
alwaysApply: false
---
---
description: Follow these rules when working on the backend.
globs: 
---
### Backend Rules

It uses Postgres, Supabase, Drizzle ORM, and Server Actions.

#### General Rules

- Never generate migrations. You do not have to do anything in the `db/migrations` folder inluding migrations and metadata. Ignore it.
- Do not edit migrations files. We use Drizzle to manage migrations automatically and never touch those files.
- Always use `type` instead of `interface` to define the types

#### Organization

#### Schemas

- Name files like `example-schema.ts`
- All schemas should go in `db/schema`
- Write db schemas as drizzle schemas in `db/schema` (Ex: `db/schema/prompts-schema.ts`)
- Write db queries with drizzle as server actions in an actions folder at the root (Ex: `actions/prompts-actions.ts`)
- If using a userId, always use `userId: text("user_id").notNull()`
- Always include createdAt and updatedAt columns in all tables
- Make sure to cascade delete when necessary
- Use enums for columns that have a limited set of possible values such as:

```ts
import { pgEnum } from "drizzle-orm/pg-core";

export const membershipEnum = pgEnum("membership", ["free", "pro"]);

membership: membershipEnum("membership").notNull().default("free");
```

Example of a schema:

`db/schema/todos-schema.ts`

```ts
import { boolean, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core";

export const todosTable = pgTable("todos", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  content: text("content").notNull(),
  completed: boolean("completed").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
});

export type InsertTodo = typeof todosTable.$inferInsert;
export type SelectTodo = typeof todosTable.$inferSelect;
```

And a more complex schema:

```ts
import { pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core";

export const chatsTable = pgTable("chats", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  name: text("name").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
});

export type InsertChat = typeof chatsTable.$inferInsert;
export type SelectChat = typeof chatsTable.$inferSelect;
```

```ts
import { pgEnum, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core";
import { chatsTable } from "./chats-schema";

export const roleEnum = pgEnum("role", ["assistant", "user"]);

export const messagesTable = pgTable("messages", {
  id: uuid("id").defaultRandom().primaryKey(),
  chatId: uuid("chat_id")
    .references(() => chatsTable.id, { onDelete: "cascade" })
    .notNull(),
  content: text("content").notNull(),
  role: roleEnum("role").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
});

export type InsertMessage = typeof messagesTable.$inferInsert;
export type SelectMessage = typeof messagesTable.$inferSelect;
```

#### Server Actions

- When importing actions, `use @/actions` or `@/actions/db` if db related
- DB related actions should go in the `actions/db` folder
- Other actions should go in the `actions` folder
- Name files like `example-actions.ts`
- All actions should go in the `actions` folder
- Only write the needed actions
- Throw typed errors for failures instead of returning status objects
- Include Action at the end of function names (Ex: exampleFunctionAction)
- Return plain data on success
- Sort in CRUD order: Create, Read, Update, Delete
- Include detailed error messages in thrown exceptions
- Use try/catch blocks with proper error logging

Example of an action:

`actions/db/todos-actions.ts`

```ts
"use server";

import { db } from "@/db/db";
import { InsertTodo, SelectTodo, todosTable } from "@/db/schema/todos-schema";
import { eq } from "drizzle-orm";

export async function createTodoAction(todo: InsertTodo): Promise<SelectTodo> {
  try {
    const [newTodo] = await db.insert(todosTable).values(todo).returning();
    return newTodo;
  } catch (error) {
    console.error("Error creating todo:", error);
    throw new Error("Failed to create todo: " + (error instanceof Error ? error.message : "Unknown error"));
  }
}

export async function getTodosAction(userId: string): Promise<SelectTodo[]> {
  try {
    return await db.query.todos.findMany({
      where: eq(todosTable.userId, userId)
    });
  } catch (error) {
    console.error("Error getting todos:", error);
    throw new Error("Failed to fetch todos: " + (error instanceof Error ? error.message : "Database error"));
  }
}

export async function updateTodoAction(id: string, data: Partial<InsertTodo>): Promise<SelectTodo> {
  try {
    const [updatedTodo] = await db.update(todosTable).set(data).where(eq(todosTable.id, id)).returning();
    
    if (!updatedTodo) {
      throw new Error("Todo not found");
    }
    
    return updatedTodo;
  } catch (error) {
    console.error("Error updating todo:", error);
    throw new Error(`Failed to update todo ${id}: ` + (error instanceof Error ? error.message : "Update failed"));
  }
}

export async function deleteTodoAction(id: string): Promise<void> {
  try {
    const [deletedTodo] = await db.delete(todosTable).where(eq(todosTable.id, id)).returning();
    
    if (!deletedTodo) {
      throw new Error("Todo not found for deletion");
    }
  } catch (error) {
    console.error("Error deleting todo:", error);
    throw new Error(`Failed to delete todo ${id}: ` + (error instanceof Error ? error.message : "Deletion error"));
  }
}

```